extend type Query {
  """
  ✨ Look up a single `Product` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  product(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Product_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Product_FirstRow
  ): Product @fdc_generated(from: "Product", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `SearchHistory` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  searchHistory(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: SearchHistory_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: SearchHistory_FirstRow
  ): SearchHistory @fdc_generated(from: "SearchHistory", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `Store` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  store(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: Store_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: Store_FirstRow
  ): Store @fdc_generated(from: "Store", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `StoreProduct` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  storeProduct(
    """
    The key used to identify the object.
    """
    key: StoreProduct_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: StoreProduct_FirstRow
  ): StoreProduct @fdc_generated(from: "StoreProduct", purpose: QUERY_SINGLE)
  """
  ✨ Look up a single `User` based on `id`, `key` or `first` and return selected fields (or `null` if not found).
  """
  user(
    """
    The unique ID of the object.
    """
    id: UUID

    """
    The key used to identify the object.
    """
    key: User_Key

    """
    Fetch the first row based on the filters and ordering.
    """
    first: User_FirstRow
  ): User @fdc_generated(from: "User", purpose: QUERY_SINGLE)
  """
  ✨ List `Product` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  products(
    """
    Filter condition to narrow down the query results.
    """
    where: Product_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Product_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Product_Having
  ): [Product!]! @fdc_generated(from: "Product", purpose: QUERY_MULTIPLE)
  """
  ✨ List `SearchHistory` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  searchHistories(
    """
    Filter condition to narrow down the query results.
    """
    where: SearchHistory_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [SearchHistory_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: SearchHistory_Having
  ): [SearchHistory!]! @fdc_generated(from: "SearchHistory", purpose: QUERY_MULTIPLE)
  """
  ✨ List `Store` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  stores(
    """
    Filter condition to narrow down the query results.
    """
    where: Store_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [Store_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: Store_Having
  ): [Store!]! @fdc_generated(from: "Store", purpose: QUERY_MULTIPLE)
  """
  ✨ List `StoreProduct` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  storeProducts(
    """
    Filter condition to narrow down the query results.
    """
    where: StoreProduct_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [StoreProduct_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: StoreProduct_Having
  ): [StoreProduct!]! @fdc_generated(from: "StoreProduct", purpose: QUERY_MULTIPLE)
  """
  ✨ List `User` objects in the table and return selected fields, optionally filtered by `where` conditions
  """
  users(
    """
    Filter condition to narrow down the query results.
    """
    where: User_Filter

    """
    Order the query results by specific fields.
    """
    orderBy: [User_Order!]

    """
    Number of rows to skip before starting to return the results.
    """
    offset: Int

    """
    Maximum number of rows to return (defaults to 100 rows).
    """
    limit: Int = 100

    """
    Set to true to return distinct results.
    """
    distinct: Boolean = false

    """
    Filter condition to apply to the groups of aggregate queries.
    """
    having: User_Having
  ): [User!]! @fdc_generated(from: "User", purpose: QUERY_MULTIPLE)
}
